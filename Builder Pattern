using System;
using System.Runtime.CompilerServices;
namespace builderPattern;


public class  Dishes
{
     public string? MainDish {  get; set; }
     
     public string? SoftDrinks { get; set; }

     public string? SideDish { get; set; }


     public void GetDishes(Dishes dish)
    {
        if (dish.MainDish != null)
        {
            Console.WriteLine($"Main Dish : {dish.MainDish}");
        }

        if (dish.SoftDrinks != null)
        {
            Console.WriteLine($"SoftDrinks: {dish.SoftDrinks}");
        }

        if (dish.SideDish != null)
        {
            Console.WriteLine($"SideDish : {dish.SideDish}");
        }
    }

    public void GetDishes()
    {
        if (MainDish != null)
        {
            Console.WriteLine($"Main Dish : {MainDish}");
        }

        if (SoftDrinks != null)
        {
            Console.WriteLine($"SoftDrinks: {SoftDrinks}");
        }

        if (SideDish != null)
        {
            Console.WriteLine($"SideDish : {SideDish}");
        }
    }
}

public interface IMeal
{
     
     void SetMainDish( string? mainDish );
     void SetSoftDrinks ( string? softDrinks );
     void SetSideDish ( string? sideDish );
     Dishes GetMeal();

}

public class OrderMeal : IMeal
{
    private Dishes _dishes=new Dishes();

     public void SetMainDish(string mainDish)
    {
       _dishes.MainDish = mainDish;
    }

     public void SetSoftDrinks(string softDrinks)
    {
        _dishes.SoftDrinks = softDrinks;
    }

     public void SetSideDish(string sideDish)
    {
        _dishes.SideDish = sideDish;
    }

     public Dishes GetMeal()
    {
        return _dishes;
    }
}


public class User
{
    public static void Main(string[] args)
    {
        IMeal NonVegmeal = new OrderMeal();

        NonVegmeal.SetMainDish("ChickenBiryani");
        NonVegmeal.SetSideDish("FriedChicken");
        NonVegmeal.SetSoftDrinks("Coke");
       

        Dishes myNonVegDish = NonVegmeal.GetMeal();

        myNonVegDish.GetDishes();


        IMeal VegMeal= new OrderMeal();

        VegMeal.SetMainDish("FullMeals");
        VegMeal.SetSoftDrinks("LemonJuice");

        Dishes myVegMeal = VegMeal.GetMeal();

        myVegMeal.GetDishes();

        // Dishes getDishes= new Dishes();
        //getDishes.GetDishes(myNonVegDish);
        //getDishes.GetDishes(myVegMeal);

        Console.ReadLine();



    }
}

Task 2:
 
    //create a report generating application
    //model prop -> UserId , UserName , Content , Comments , Result
    //IReport ->  have diff methods to set the prop 
    //ReportGenerator ( class ) -> implement all the methods -> GenerateReport( will validate mandate things are updated or not )
    //user class use the above functionalities

using System;
using System.Text.Json;
namespace BuilderPattern
{     
      public enum Result
    {
        Pass , fail , NotDeclared , NotSet
    }

    public class Report
    {
        public int UserId { get; set; } = 0;
        public string UserName { get; set; } = null;
        public string Comment { get; set; } = "Autogenerated : Comment Not Provided ";
        public string Content { get; set; } = null;
        public Result result { get; set; } = Result.NotSet;
    }
     public interface IReportGenerator
    {
        IReportGenerator AddUserId(int userId);
        IReportGenerator AddUserName(string userName);
        IReportGenerator AddContent(string content);
        IReportGenerator AddComment(string comment);
        IReportGenerator AddResult(Result result);

        IReportGenerator FinalizeReport();
        void PrintReport();
    }

    public class ReportGenerator : IReportGenerator
    {
        private readonly Report _Report=new Report();
        private  bool isFinalized=false;
        public IReportGenerator AddComment(string comment)
        {
            if (!string.IsNullOrWhiteSpace(comment))
            {
                _Report.Comment = comment;
                return this ;
            }

            throw new ArgumentNullException("Data is Emplty ! Please check and try again");
        }

        public IReportGenerator AddContent(string content)
        {
            if (!string.IsNullOrWhiteSpace(content))
            {
                _Report.Content = content;
                return this;
            }
          //  throw new NotImplementedException("Content is empty ! Please check and try again");
            throw new ArgumentNullException();
        }

        public IReportGenerator AddResult(Result result)
        {
            _Report.result = result;
            return this;
           
        }

        public IReportGenerator AddUserId(int userId)
        {
            if (userId > 0)
            {
                _Report.UserId = userId;
                return this;
            }
           // throw new NotImplementedException("User Id should be greater than 0");
            throw new ArgumentNullException();
        }

        public IReportGenerator AddUserName(string userName)
        {
            if (!string.IsNullOrWhiteSpace(userName))
            {
                _Report.UserName = userName;
                return this;
            }
            //throw new NotImplementedException("UserName should not be empty");
            throw new ArgumentNullException();
        }

        //get the report here 
        public IReportGenerator FinalizeReport()
        {

            //validate the field which are missing 
            if (_Report.UserId <= 0)
                throw new NotImplementedException("UserId is Required");
            if (_Report.UserName.Length <= 0)
                throw new NotImplementedException("UserName is Required");
            if (_Report.result == Result.NotSet)
                throw new NotImplementedException("Result is Required");

            isFinalized=true;
            return this;

        }

        public void PrintReport()
        {
            if (isFinalized)
            {
                Console.WriteLine($" Title :  {_Report.Content} ");
                Console.WriteLine($"UserId : {_Report.UserId}  :   UserName : {_Report.UserName}");
                Console.WriteLine($"Result: {_Report.result}");
                Console.WriteLine($"Comments : {_Report.Comment}");
            }
            else
            {
                Console.WriteLine("Please Finalize and try print the report");
            }
        }
    }

    public class user
    {
        public static void Main(string[] args)
        {
            IReportGenerator report1 = new ReportGenerator();

            report1.AddUserId(1561666);
            report1.AddComment("I really Enjoyed it !");
            report1.AddResult(Result.Pass);
            report1.AddUserName("Suriya");
            report1.AddContent("10th Board Examn Report");

            report1.FinalizeReport();
            report1.PrintReport();

            IReportGenerator report2 = new ReportGenerator();

            report2.AddResult(Result.Pass)
                   .AddUserId(1475787)
                   .AddContent("12Th Board Exam Report")
                   .AddComment("I am not gave my best ")
                   .AddUserName("Suriya")
                   .FinalizeReport();

            report2.PrintReport();
            Console.ReadLine();
        }
               //    .

            //report2.FinalizeReport();
            //report2.PrintReport();

            //IReportGenerator report3=new ReportGenerator();
            //report3.PrintReport();
          
             
        }
    }


